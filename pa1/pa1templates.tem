template<typename T> void pa1templates::Swap( T* t1, T* t2 ){
    T temp( *t1 );
    *t1 = *t2;
    *t2 = temp;
}

template<typename T> T pa1templates::NewtonFunction( const T& x ){
    return ( std::exp(x) - 1.5 - std::atan( x ));
}

template<typename T> T pa1templates::NewtonFunctionDerivative( const T& x ){
    return ( std::exp(x) - ( 1 / ( std::pow( x, 2 ) + 1 )));
}

template<typename T> T pa1templates::SecantFunction( const T& x ){
    return ( std::pow( x, 3 ) - std::sinh( x ) + 4 * std::pow( x, 2 ) + 6 * x + 9 );
}

template<typename T> pa1templates::OutputList pa1templates::NewtonsMethod ( 
    T x0, 
    const T MAX,
    const T DELTA,
    const T EPSILON ) {

        OutputList newtonOutputLocal;

        T v( NewtonFunction( x0 ));
        newtonOutputLocal.push_back( OutputPair( x0, v ));

        if ( std::fabs(v) < EPSILON )
            return newtonOutputLocal;
        
        for( int k = 1; k < MAX; ++ k ){
            T x1 = x0 - v / NewtonFunctionDerivative( x0 );
            v = NewtonFunction( x1 );
            newtonOutputLocal.push_back( OutputPair( x1, v ));
            if (( std::fabs( x1 - x0 ) < DELTA )
                || ( std::fabs( v )  < EPSILON )){
                return newtonOutputLocal;
            }
            x0 = x1;
        }

        return newtonOutputLocal;
}

template<typename T> pa1templates::OutputList pa1templates::SecantMethod (
    T a,
    T b,
    const T MAX,
    const T DELTA,
    const T EPSILON ) {

        OutputList secantOutputLocal;

        T fa( SecantFunction( a ));
        T fb( SecantFunction( b ));

        secantOutputLocal.push_back( OutputPair( a, fa ));
        secantOutputLocal.push_back( OutputPair( b, fb ));

        for ( int k = 2; k < MAX; ++ k ) {
            if( std::fabs( fa ) > std::fabs( fb )){
                Swap( &a, &b );
                Swap( &fa, &fb );
            }
            T s( (b - a)/(fb - fa) );
            b = a;
            fb = fa;
            a = a - fa * s;
            fa = SecantFunction( a );
            secantOutputLocal.push_back( OutputPair( a, fa ));

            if (( std::fabs(fa) < EPSILON )
                || ( std::fabs(b - a) < DELTA ))
                return secantOutputLocal;
        }

        return secantOutputLocal;
}


